import java.applet.*;
import java.net.*;
import java.lang.*;
import java.io.*;
import java.awt.*;
import java.util.*;

public class ChatClient extends Applet implements Runnable {
Socket sock;
DataInputStream dis;
PrintStream ps;
Thread kicker = null;
TextField inputField;
TextArea outputArea;
Button B1,B2;
List L;
Panel p1,p2;
String name, theHost;
int thePort;

public void init() {

String temp;

temp = getParameter("host");
if( temp == null)
	theHost = "localhost";
else
	theHost = temp;

temp = getParameter("port");

try {
	thePort = Integer.valueOf(temp).intValue();
} catch(Exception e) {
	thePort = 1123;
}


/* first, assign a BorderLayout and add the two Panels */
setLayout( new BorderLayout() );

p1 = new Panel();
p2 = new Panel();

p1.setLayout( new FlowLayout() );

add("South", p1);
add("North",p2);

/* next create the Field used for input.  For fun, make it 80 columns wide.  Add it to the south Panel */
inputField = new TextField(80);
p1.add( inputField );

/* create the output Area.  Make it 10 rows by 60 columns.  Add it to north Panel */
outputArea = new TextArea(10, 60);
p2.add(outputArea);

/* don't let the user edit the contents, and make the background color Cyan - because it looks nice */
outputArea.setEditable(false);
outputArea.setBackground(Color.cyan);

/* now for the Buttons.  Make the first Button to let the user "login" */
B1 = new Button("login");
p1.add(B1);

/* The second Button allows the user to "logout", but is initially disabled */
B2 = new Button("logout");
p1.add(B2);
B2.disable();

/* Let's create the List next. Remember that the first item is always "All Participants" */
L = new List();
p2.add(L);
L.addItem("All Participants");

/* Let's select the first item by default */
L.select(0);

}





public void run() {

while (sock == null && kicker != null) {
	try {
		sock = new Socket(theHost,thePort);
		dis = new DataInputStream( sock.getInputStream() );
		ps = new PrintStream( sock.getOutputStream() );		
	} catch (Exception e) {
		System.out.println("Unable to contact host.");
		outputArea.appendText("Unable to contact host. Retrying...\n");
		sock = null;
	}
		try{ sleep( 5000 ); } catch(Exception e);
	}

output("login||"+name);
outputArea.appendText("Logged in to server successfully.\n");
while (sock != null && dis != null && kicker != null) {
try {
	String str = dis.readLine();
	System.out.println("Got: "+str);
	if(str != null) 
		if(str.indexOf("||") != -1) {
			StringTokenizer st = new StringTokenizer(str,"||");
			String cmd = st.nextToken();
			String val = st.nextToken();
			if(cmd.equals("list")) {
				p2.remove(L);
				L = new List();
				p2.add(L);
				p2.repaint();
				p2.layout();
				L.addItem("All Participants");
				StringTokenizer st2 = new StringTokenizer(val, "&");
				while(st2.hasMoreTokens())
					L.addItem(st2.nextToken());
				L.select(0);
			}
			else
			if(cmd.equals("logout")) {
			int x;
				for(x=0;x< L.getRows();x++) 
				if( val.startsWith( L.getItem(x) ) )
					L.delItem(x);
			outputArea.appendText(val+"\n");
			validate();
			}
			else
			if(cmd.equals("login")) {
			outputArea.appendText(st.nextToken()+"\n");
			}
			else
			outputArea.appendText( val + "\n" );
			}
		else
			outputArea.appendText(str + "\n");
} catch (IOException e) {
	System.out.println("Connection lost.");
	kicker.stop();
}
}	
}

public void stop() {

output("logout||"+name);
try {
	dis.close();
	ps.close();
	sock.close();
} catch (Exception e);
sock = null;
outputArea.appendText("Logged out from server.\n");

/* reset our affected GUI components */
		B2.disable();
		B1.setLabel("login");
		p1.layout();

kicker = null;
}

public boolean output(String str) {
try {
	ps.println(str);
	return true;
} catch(Exception e) {
	return false;
}
}


public boolean handleEvent(Event evt) {

if( evt != null ) { // just in case

/* first, we handle the List-related Events.  The user is not allowed to talk to nobody, so we default to "All Participants" (index 0) */
if(evt.id == Event.LIST_DESELECT) {
	L.select(0);
	return true;
	}

/* when the user makes a selection in the List, we adjust the lable of Button B1 and then force Panel p1 to redraw and re-layout */
if( evt.id == Event.LIST_SELECT ) {
	if( L.getSelectedIndex() == 0)
		B1.setLabel("say");
	else
		B1.setLabel("whisper");
	p1.layout();
	return true;
	}

/* if the Event is an ACTION_EVENT generated by a TextField (we only have one TextField), then it should perform the same action as pressing Button B1 (either login, say, or whisper) */
if( evt.target.equals( inputField ) && evt.id == Event.ACTION_EVENT) evt.arg = B1.getLabel();


/* now, we check to see if we have an "arg" */
if( evt.arg != null) {

/* if so, we must check to see if it corresponds to one of the commands we understand */

/* If it equals "login", we assume the user wants to login and has not done so already */
if (evt.arg.equals("login")) {
		outputArea.appendText("Logging in...\n");

/* the label of B1 is currently "login", change it to "say" and enable B2 */
		B1.setLabel("say");
		B2.enable();
/* find out what alias the user wants to use */
		name = inputField.getText();
/* clear the inputField */
		inputField.setText("");

/* create a new Thread and start it */
	kicker = new Thread(this);
	kicker.start();

	return true;
	}

/* if the user wants to "say", then we merely output this command to the server */
if(evt.arg.equals("say")) {
		output("say||"+inputField.getText());
		inputField.selectAll();
	return true;
	}
	
/* if the user wants to whisper, we output this to the server AND we notify the user of what happened (remember that the server will only echo a "say" command to all clients.  "whisper" is only sent to the target */

if(evt.arg.equals("whisper")) {
		outputArea.appendText("You whisper to "+L.getSelectedItem()+ ": "+inputField.getText()+"\n");
		output("whisper||"+inputField.getText()+"||"+L.getSelectedItem() );
		inputField.selectAll();
	return true;
	}
}

/* if the user pressed B2 (yes, we could have checked the "arg" but I wanted to show different ways of checking Events, including this one) */
if(evt.target.equals(B2)) {
		outputArea.appendText("Logging out...\n");
/* stop the Thread (which will disconnect) */
		kicker.stop();


	return true;
	}
}

/* if the Event is not one of the ones we can handle, we should pass it along the chain-of-command to our super-class */
	return super.handleEvent(evt);;
    }

}