/*============================================================================
	Title: RenderMan.cpp
	Module: Pi/MathLib
	Author: Ignacio Castaño
	Description: Utility functions that are part of the render interface.
	Changes:
		25/01/2003 - Ignacio Castaño
			Math library started.

============================================================================*/

/*----------------------------------------------------------------------------
	Doc:
----------------------------------------------------------------------------*/

/** @file RenderMan.cpp
 * Utility functions that are part of the render interface.
**/

/*----------------------------------------------------------------------------
	Includes:
----------------------------------------------------------------------------*/

#include "RenderMan.h"


/*----------------------------------------------------------------------------
	Statics:
----------------------------------------------------------------------------*/

/** 
 * This is an array of pseudo random numbers. 
 * It's copied twice for automatic wrapping. 
**/
static int P[512] = {
	151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
	140,  36, 103,  30,  69, 142,   8,  99,  37,  240, 21,  10,  23, 190,   6, 148,
	247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
	 57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
	 74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
	 60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54, 
	 65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
	200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
	 52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
	207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
	119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
    129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
	218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241, 
	 81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
	184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
	222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180,
	151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
	140,  36, 103,  30,  69, 142,   8,  99,  37,  240, 21,  10,  23, 190,   6, 148,
	247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
	 57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
	 74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
	 60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54, 
	 65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
	200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
	 52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
	207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
	119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
    129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
	218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241, 
	 81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
	184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
	222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180
};



/*----------------------------------------------------------------------------
	Functions:
----------------------------------------------------------------------------*/

/** Linear interpolation. */
static inline REAL lerp( REAL t, REAL a, REAL b ) {
	return a + t * (b - a);
}


/** */
inline static REAL fade( REAL t ) { 
	return t * t * t * (t * (t * 6 - 15) + 10);
//	return t * t * ( 3 - 2 * t );
}


/** Convert the 4 low bits of the hash code into 12 gradient directions. */
inline static REAL grad( int hash, REAL x, REAL y, REAL z ) {
	int h = hash & 15;
	REAL u = (h<8 || h==12 || h==13) ? x : y;
	REAL v = (h<4 || h==12 || h==13) ? y : z;
	return ((h&1)==0 ? u : -u) + ((h&2)==0 ? v : -v);
}



/** 3d Perlin Noise. */
REAL noise3( REAL x, REAL y, REAL z ) {

	// FIND UNIT CUBE THAT CONTAINS POINT.
	int X = int(floor(x)) & 255;	// 0xFF
	int Y = int(floor(y)) & 255;
	int Z = int(floor(z)) & 255;
	
	// FIND RELATIVE X,Y,Z OF POINT IN CUBE.
	x -= floor(x);
	y -= floor(y);
	z -= floor(z);

	// COMPUTE FADE CURVES FOR EACH OF X,Y,Z.
	REAL u = fade(x);
	REAL v = fade(y);
	REAL w = fade(z);

	// HASH COORDINATES OF THE 8 CUBE CORNERS.
	int A  = P[X  ] + Y;
	int AA = P[A  ] + Z;
	int AB = P[A+1] + Z;
	int B  = P[X+1] + Y;
	int BA = P[B  ] + Z;
	int BB = P[B+1] + Z;

	// ADD BLENDED RESULTS FROM 8 CORNERS OF CUBE
	REAL a00 = lerp( u, grad( P[AA  ], x,   y,   z ), grad( P[BA  ], x-1,   y,   z ) );
	REAL a01 = lerp( u, grad( P[AB  ], x, y-1,   z ), grad( P[BB  ], x-1, y-1,   z ) );
	REAL a10 = lerp( u, grad( P[AA+1], x,   y, z-1 ), grad( P[BA+1], x-1,   y, z-1 ) );
	REAL a11 = lerp( u, grad( P[AB+1], x, y-1, z-1 ), grad( P[BB+1], x-1, y-1, z-1 ) );

	REAL b0 = lerp( v, a00, a01 );
	REAL b1 = lerp( v, a10, a11 );

	return lerp( w,	b0, b1 );
}


/** 2d Perlin noise function. */
REAL noise2( REAL x, REAL y ) {
	return noise3( x, y, 0 );
}


/** 1d Perlin noise function. */
REAL noise1( REAL x ) {
	return noise3( x, 0, 0 );
}